/*
* implementation of functions prescribed in tree_node.h
*
* @author Gunther Kroth   gdk6217@rit.edu
*/

#include <stdlib.h>
#include <string.h>

#include "tree_node.h"
#include "queue.h"


tree_node_t * create_node(char * name) {
	tree_node_t * n = malloc(sizeof(tree_node_t));
	n->name = name;
	n->children = 0;
	n->offSize = 6;
	tree_node_t ** children = malloc(6 * sizeof(tree_node_t));
	n->offspring = children;
	return NULL;
}

void destroy_tree(tree_node_t * tree) {
	if (tree == NULL) {
		return;
	}
	for (int i = 0; i < tree->children; i++) {
		tree_node_t * childNode = tree->offspring[i];
		destroy_tree(childNode);
	}
	free(tree);
}

tree_node_t * find_node(tree_node_t * tree, char * name) {
	queueADT queue = que_create();
	que_enqueue(queue, tree);
	while(que_size(queue) > 0) {
		tree_node_t * node = (tree_node_t*)que_front(queue);
		que_dequeue(queue);
		if (strcmp(node->name, name) == 0) {
			return node;
		} else {
			for (int i = 0; i < tree->children; i++) {
				que_enqueue(queue, tree->offspring[i]);
			}
		}
	}
	return NULL;
}

void print_tree(tree_node_t * tree, char * name) {
	queueADT queue = que_create();
	que_enqueue(queue, tree);
	while(que_size(queue) > 0) {
		tree_node_t * node = (tree_node_t*)que_front(queue);
		que_dequeue(queue);
		if (strcmp(node->name, name) == 0) {
			printf("%s had ", node->name);
			childPrintCount = 0;
			for (int i = 0; i < tree->children; i++) {
				tree_node_t * childNode = tree->offspring[i];
				if (childPrintCount == tree->children - 1) {
					printf("and %s.", childNode->name);
			}
		}
}

tree_node_t * add_child(tree_node_t * tree, char * parent_name, char * child) {
	if (tree->children == tree->offSize) {
		//realloc
	}
	//TODO
	return NULL;
}
